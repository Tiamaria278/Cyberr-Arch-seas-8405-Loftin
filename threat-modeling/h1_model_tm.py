#!/usr/bin/env python3

from pytm.pytm import TM, Server, Datastore, Dataflow, Boundary, Actor, Lambda, ExternalEntity

# header
tm = TM("I3: How does it work?")
tm.description = "Application of Reinforcement Learning Methodology to Improve Robustness of Data Breach Controls"
tm.isOrdered = True

# boundaries
home = Boundary("Home")
internet = Boundary("Internet")
aws = Boundary("AWS")
company = Boundary("Company")

# Actors
# teleworker = Actor("Teleworker Endpoint")
# teleworker.inBoundary = home

# proxy = Server("Network Proxy")
# proxy.inBoundary = aws

# dns = Server("DNS")
# dns.inBoundary = aws

h1_model = Server("H1 Model")
h1_model.inBoundary = aws

whois = ExternalEntity("WHOIS")
whois.inBoundary = internet

alexa = ExternalEntity("Alexa")
alexa.inBoundary = internet

umbrella = ExternalEntity("Umbrella")
umbrella.inBoundary = internet

majestic = ExternalEntity("Majestic")
majestic.inBoundary = internet

tranco = ExternalEntity("Tranco")
tranco.inBoundary = internet

anomali = ExternalEntity("Anomali")
anomali.inBoundary = internet

virustotal = ExternalEntity("VirusTotal")
virustotal.inBoundary = internet

web_traffic = ExternalEntity("Taffic Stats")
web_traffic.inBoundary = internet

ibm_resolver = ExternalEntity("Quad9")
ibm_resolver.inBoundary = internet

dga = Server("DGA")
dga.inBoundary = aws

top_domain = Server("Loopback")
top_domain.inBoundary = aws

# google = ExternalEntity("google.com")
# google.inBoundary = internet

# data flow
# Dataflow(teleworker, proxy, "Browse https://www.google.com")
# Dataflow(proxy, dns, "What is the IP address of the domain?")
# Dataflow(dns, h1_model, "Is www.google.com a malicious domain?")
Dataflow(h1_model, whois, "Is the domain receecently registered or about to expire in 6 monhts?")
Dataflow(whois, h1_model, "Return the number of days since registration and expiry")
Dataflow(h1_model, alexa, "What is the domain rank by browsing activity in the last 24 hours?")
Dataflow(alexa, h1_model, "Return domain rank according to browsing activity")
Dataflow(h1_model, umbrella, "What is the domain rank by number of DNS lookups in the last 24 hours?")
Dataflow(umbrella, h1_model, "Return domain rank according to DNS lookups")
Dataflow(h1_model, majestic, "What is the domain rank by number of citations in the last 24 hours?")
Dataflow(majestic, h1_model, "Return domain rank according to citations")
Dataflow(h1_model, tranco, "How popular is the domain in the last 30 days?")
Dataflow(majestic, h1_model, "Return domain rank according to popularity")
Dataflow(h1_model, anomali, "How many suspicious activities are reported about the domain by the community?")
Dataflow(anomali, h1_model, "Return the severity and confidence of the suspicious activity")
Dataflow(h1_model, virustotal, "How many virus scanners reported suspicions about the domain?")
Dataflow(virustotal, h1_model, "Return the number of virus scanners reported the domain as suspicious")
Dataflow(h1_model, web_traffic, "How much web traffic reported on www.google.com for the last 90 days?")
Dataflow(web_traffic, h1_model, "Return domain ranking according to web traffic in the last 90 days")
Dataflow(h1_model, ibm_resolver, "What is the IP address of the domain according to threat intelligence DNS service?")
Dataflow(ibm_resolver, h1_model, "Return non-existent address if the domain is reported as malicious by threat intelligence")
Dataflow(h1_model, dga, "What is the probability of the domain generated by humans or computers?")
Dataflow(dga, h1_model, "Return the probability  of the domain generated by computers using CNN-LSTM model")
Dataflow(h1_model, top_domain, "What is the probability of top-level domain, google.com, being malicious?")
Dataflow(top_domain, h1_model, "Return the score of the domain being malicious by running H1 RL model for the top-level domain")
# Dataflow(h1_model, dns, "return malicious or benign")
# Dataflow(dns, proxy, "Return blocking address if domain is malicious otherwise return real IP address")
# Dataflow(proxy, google, "If data in transit is benign, get the contents of https://www.google.com")
# Dataflow(google, proxy, "Return the content of https://www.google.com?")
# Dataflow(proxy, teleworker, "Content of https://www.google.com")

# render
tm.process()